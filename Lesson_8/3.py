# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.

# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит
# работу скрипта, введя, например, команду “stop”. При этом скрипт завершается,
# сформированный список выводится на экран.

# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
# только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и
# отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.

class OwnError():

    def __init__(self, elem):
        self.elem = elem

    @classmethod
    def check_num(cls, elem):
        try:
            if int(elem):
                return True
        except ValueError:
            return False


el = 0
error = OwnError(el)
my_list = []
while True:
    el = input('Ввести целое число: ')
    type_el = error.check_num(el)
    if type_el:
        my_list.append(int(el))

    elif el == 'stop':
        break
    else:
        print('Ошибка типа введенных данных')
        print('Введенные данные не занесены в список')
        print('Продолжаем ввод')

print(my_list)
